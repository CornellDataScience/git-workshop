import random
import math

# ======================================================
# SHARED FUNCTIONS
# ======================================================


def most_frequent(lst):
    """ Assume lst is a list.
        Return the set of elements of lst which have the maximum frequency.
        e.g. ['b','e','l','l','e'] -> {'l','e'}
        e.g. [] -> {} """
    freq = {}
    most_freq = set()
    max = 0
    for a in lst:
        freq.setdefault(a, 0)
        freq[a] += 1
        if freq[a] > max:
            max = freq[a]
            most_freq = {a}
        elif freq[a] == max:
            most_freq.add(a)
    return most_freq


def init_array(*dims, generator=(lambda: 0)):
    """ Assume dims is a lst of dimensions of positive integers of length n>0.
        Return n-dimensional array of dimension 
        dims[0] x dims[1] x dims[2] x ... x dims[n-1]
        populated with items generated by calling generator().
        e.g. init_array(2, 1, generator=fn) -> [[fn()], [fn()]] """
    
    return []


# ======================================================
# STRINGS
# ======================================================


def keep_only(lst, good):
    """ Assume lst and good are both lists.
        Return a copy of lst keeping only the elements in good.
        e.g. keep_only([a,b,c], [c,d]) -> [c] """
    return []


def remove_all(lst, bad):
    """ Assume lst and bad are both lists.
        Return a copy of lst with any elements in bad removed.
        e.g. remove_all([a,b,c], [c,d]) -> [a,b] """
    pass


def vowels():
    """ Returns list of vowels, including upper and lowercase. """
    pass


def remove_most_freq_vowel(s):
    """ Return copy of string s with the most frequent vowel removed.
        Assume that s is not composed of any uppercase letters, but may
        include non-alphabetic symbols.
        If s has no vowels, then it remains unchanged.
        If s has multiple most frequent vowels, remove them all. """
    pass


# ======================================================
# COIN FLIPPING
# ======================================================


def flip_coin(p):
    """ Returns 1 with probability p for heads,
        0 for tails otherwise.
        Assume 0 <= p <= 1. """
    pass


def flip_coins(n, p):
    """ Returns list of length n of results of flipping n coins
        independently, each with probability of heads p, and
        1 means heads and 0 means tails.
        Assume n > 0 and 0 <= p <= 1 """
    pass


def average_of_flips(n, p):
    """ Returns the average value of flipping n coins,
        each with probability of heads p.
        You can assume n > 0 and 0 <= p <= 1. """
    pass


def median_of_flips(n, p):
    """ Returns the median value of flipping n coins,
        each with probability of heads p.
        You can assume n > 0 and 0 <= p <= 1. """
    pass


# ======================================================
# CLASSES AND TYPES
# ======================================================


class SeatingChart():
    """ Represents auditorium seating with given number of rows and columns.
        Row_spacing is minimum number of seats between people in each row.
        The auditorium starts empty.
        Assume each seat can be occupied by one person at a time.
        If any of num_rows, num_cols, row_spacing are not integers, raise a TypeError
        If num_rows or num_cols is not positive, raise a ValueError
        If row_spacing is negative, raise a ValueError."""

    def __init__(self, num_rows, num_cols, row_spacing=0):
        pass

    def max_occupancy(self):
        """ Returns max number of people that can sit 
            while respecting auditorium size and row spacing."""
        pass

    def current_occupancy(self):
        """ Returns number of people sitting down in the auditorium."""
        pass

    def occupied(self, r, c):
        """ Returns True if seat (r,c) is occupied and False otherwise.
            Rows and Seats are 0-indexed.
            Assume that r, c are integers.
            If r or c  fall outside the auditorium bounds, return True."""
        pass

    def attempt_sit(self, r, c):
        """ Person tries to sit at (r,c) if possible.
            If they can sit then sit them there and return True,
            Return False otherwise.
            Assume that r and c are integers. """
        pass
